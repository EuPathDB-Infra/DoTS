#!@perl@

use strict;
use lib "$ENV{GUS_HOME}/lib/perl";
use Getopt::Long;
use GUS::ObjRelP::DbiDatabase;
use GUS::Common::GusConfig;


my ($verbose, $inputFile, $taxon_id, $gusConfigFile, $regex);
&GetOptions("verbose!"=> \$verbose,
            "inputFile=s" => \$inputFile,
	    "taxon_id=i" => \$taxon_id,
            "gusConfigFile=s" => \$gusConfigFile,
            "regex=s" => \$regex);

my $usage = "
usage: makeMGC2DoTSfile --inputFile  --taxon_id --verbose --gusConfigFile [\$GUS_CONFIG_FILE]\n

Create mapping between MGC and DoTS.  

Input is a 8 column tab delimited file, where each row is: 
symbol\tGenbank_defline(MGC:id)\tLL_id\tunigene_id\timage_id\tGenbank_acc\tlibrary_id\tlibrary_name

Output is 2 column space delimited, where each row is:
MGC:id\tdots.externalnasequence.na_sequence_id
";

die $usage unless ($inputFile && $taxon_id);

print STDERR "Establishing dbi login\n" if $verbose;

my $gusconfig = GUS::Common::GusConfig->new($gusConfigFile);

my $db = GUS::ObjRelP::DbiDatabase->new($gusconfig->getDbiDsn(),
					$gusconfig->getReadOnlyDatabaseLogin(),
					$gusconfig->getReadOnlyDatabasePassword(),
					$verbose,0,1,
					$gusconfig->getCoreSchemaName());

my $dbh = $db->getQueryHandle();

my $mgc2naseqid = &parseMGCFile($inputFile);

&getNaSeq($dbh,$mgc2naseqid,$taxon_id);

&printHash($mgc2naseqid);

sub parseMGCFile {
    my ($file) = @_;

    open(F, $file) || die "Can't open input file $file";
    my $count = 0;
    my %mgc2naseqid;
    while(<F>) {
      chomp;
      my $mgc;
      my @line = split(/\t/,$_);
      if ($line[1] =~ /MGC:(\d+)/) {
	$mgc = $1;
      }
      else {
	next;
      }
      my $acc = $line[5];
      $acc =~ s/\.\d+//;
      $mgc2naseqid{$acc}[0]=$mgc;
      $count++;
      print STDERR "$count MGC ids processed\n" if $count % 1000 == 0;
    }
    close (F);
    print STDERR "$count total MGC ids processed\n" ;
    return \%mgc2naseqid;
}


sub getNaSeq {
  my ($dbh,$filehash,$taxon_id) = @_;
  print STDERR "Getting na_sequence_ids\n";
  my $count = 0;
  my $sql = "select source_id,na_sequence_id from dots.ExternalNASequence where taxon_id = $taxon_id";
  print STDERR "Query: $sql\n";
  my $stmt = $dbh->prepareAndExecute($sql);

  while (my ($source_id,$na_seq_id) = $stmt->fetchrow_array()) {
    if ($filehash->{$source_id}->[0] >=1) {
      $filehash->{$source_id}->[1] = $na_seq_id;
      $count++;
      print STDERR "$count accessions have na_sequence_ids\n" if $count % 1000 == 0;
    }
  }
  print STDERR "$count total accessions have na_sequence_ids\n";
}

sub printHash {

  my ($filehash) = @_;
  print STDERR "printing tab delimited MGC to na_sequence_id map\n";
  my $count=0;
  foreach my $acc (keys %$filehash) {
    my $mgcId = $filehash->{$acc}->[0];
    my $naSeq = $filehash->{$acc}->[1];
    print STDOUT "MGC:$mgcId\t$naSeq\n" if $naSeq;
    $count++ if $naSeq;
  }
  print STDERR "$count rows printed\n";
}


$db->logout();
