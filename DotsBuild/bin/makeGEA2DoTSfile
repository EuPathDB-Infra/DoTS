#!@perl@ 

use strict;
use lib "$ENV{GUS_HOME}/lib/perl";
use Getopt::Long;
use GUS::ObjRelP::DbiDatabase;
use GUS::Common::GusConfig;


my ($verbose, $inputFile, $taxon_id, $gusConfigFile);
&GetOptions("verbose!"=> \$verbose,
            "inputFile=s" => \$inputFile,
	    "taxon_id=i" => \$taxon_id,
            "gusConfigFile=s" => \$gusConfigFile);

my $usage = "
usage: makeGEA2DoTSfile --inputFile  --verbose --gusConfigFile [\$GUS_CONFIG_FILE]\n

Create mapping between Gene Expression Atlas affy_ids and DoTS.  

Input is a 3 column space delimited file, where each row is: 
affy_id locus_link refseq_or_gb_accession

Output is 2 column space delimited, where each row is:
DT.xxxx affy_id
";

die $usage unless ($inputFile && $taxon_id);

my %gb2affy = &parseGEAFile($inputFile);

print STDERR "Establishing dbi login\n" if $verbose;

my $gusconfig = GUS::Common::GusConfig->new($gusConfigFile);

my $db = GUS::ObjRelP::DbiDatabase->new($gusconfig->getDbiDsn(),
					$gusconfig->getReadOnlyDatabaseLogin(),
					$gusconfig->getReadOnlyDatabasePassword(),
					$verbose,0,1,
					$gusconfig->getCoreSchemaName());

my $dbh = $db->getQueryHandle();

my $sql = "select ass.assembly_na_sequence_id, e.source_id 
     from dots.ExternalNASequence e, dots.AssemblySequence ass
     where e.na_sequence_id = ass.na_sequence_id
     and e.taxon_id = $taxon_id";

print STDERR "Query: $sql\n" if $verbose;

my $stmt = $dbh->prepareAndExecute($sql);

my $c;
while(my($assembly,$acc) = $stmt->fetchrow_array()) {
    if ($gb2affy{$acc}) {
	foreach my $affy_id (@{$gb2affy{$acc}}) {
	    print "$affy_id\tDT.$assembly\n" if $rna_id;
	}
    } 
    $c++;
    print STDERR "Processed $c\n" if $verbose && $c % 1000 == 0;
}

$db->logout();

sub parseGEAFile {
    my ($file) = @_;

    open(F, $file) || die "Can't open input file $file";

    my %gb2affy;
    while(<F>) {
	/(\w+)\s+\w+\s+(\w+)/ || die "Can't parse $_";
	my $affy_id = $1;
	my $acc = $2;
	if (!$gb2affy{$acc}) {
	    $gb2affy{$acc} = [$affy_id];
	} else {
	    push(@{$gb2affy{$acc}}, $affy_id);
	}
    }
    return %gb2affy;
}
