#!/usr/bin/perl


use strict;
use lib "$ENV{GUS_HOME}/lib/perl";
use Getopt::Long;
use GUS::ObjRelP::DbiDatabase;
use GUS::Common::GusConfig;

my ($verbose, $inputFile,$taxon_id, $gusConfigFile);

&GetOptions("verbose!"=> \$verbose,
            "inputFile=s" => \$inputFile,
	    "taxon_id=i" => \$taxon_id,
	    "gusConfigFile=s" => \$gusConfigFile);

my $usage = "usage: makeGeneIdToNaSeqFile --inputFile  --$taxon_id --verbose 

Create mapping between MGI ids  and na_sequence_ids.  

Input is a 10 column tab delimited file, where each row is: 
MGI symbol status Marker_Type	Marker_Name cM_Position	Chromosome GenBank_Accession Unigene_ID RefSeq_ID


Output is 2 column tab delimited, where each row is:
MGI na_sequence_id\n";


die "$usage" unless ($inputFile);


print STDERR "Establishing dbi login\n" if $verbose;

my $gusconfig = GUS::Common::GusConfig->new($gusConfigFile);

my $db = GUS::ObjRelP::DbiDatabase->new($gusconfig->getDbiDsn(),
					$gusconfig->getReadOnlyDatabaseLogin(),
					$gusconfig->getReadOnlyDatabasePassword(),
					$verbose,0,1,
					$gusconfig->getCoreSchemaName());
my $dbh = $db->getQueryHandle();

my $fileHash = &readFile($inputFile);
&getNaSeq($dbh,$fileHash,$taxon_id);
&printHash($fileHash);

sub readFile {

  my ($infile) = @_;
  print STDERR "Reading input file\n";
  my %filehash;
  open (IN, $infile) || die "Can't open $infile\n";
  my $count;
  while (<IN>) {
    chomp;
    my @arr = split(/\t/,$_);
    next unless $arr[2] eq 'O';
    $arr[0] =~ s/MGI://;
    my @seqArray = split(/\s/,$arr[7]);
    push (@seqArray,$arr[9]) if $arr[9];
    foreach my $seq (@seqArray) {
      $filehash{$seq}[0] = $arr[0];
    }
    $count++;
    print STDERR "$count MGI ids processed\n" if $count % 1000 == 0;
  }
  close (IN);
  print STDERR "$count total MGI ids processed\n" ;
  return \%filehash;
}

sub getNaSeq {
  my ($dbh,$filehash,$taxon_id) = @_;
  print STDERR "Getting na_sequence_ids\n";
  my $count = 0;
  my $sql = "select source_id,na_sequence_id from dots.ExternalNASequence where taxon_id = $taxon_id";
  print STDERR "Query: $sql\n";
  my $stmt = $dbh->prepareAndExecute($sql);

  while (my ($source_id,$na_seq_id) = $stmt->fetchrow_array()) {
    if ($filehash->{$source_id}->[0] >=1) {
      $filehash->{$source_id}->[1] = $na_seq_id;
      $count++;
      print STDERR "$count accessions have na_sequence_ids\n" if $count % 1000 == 0;
    }
  }
  print STDERR "$count total accessions have na_sequence_ids\n";
}


sub printHash {

  my ($filehash) = @_;
  print STDERR "printing tab delimited MGI to na_sequence_id map\n";
  my $count=0;
  foreach my $acc (keys %$filehash) {
    my $mgiId = $filehash->{$acc}->[0];
    my $naSeq = $filehash->{$acc}->[1];
    print STDOUT "MGI:$mgiId\t$naSeq\n" if $naSeq;
    $count++ if $naSeq;
  }
  print STDERR "$count rows printed\n";
}


$db->logout();


