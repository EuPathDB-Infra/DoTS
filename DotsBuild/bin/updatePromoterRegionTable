#!@perl@
use strict;
use lib "$ENV{GUS_HOME}/lib/perl";
use Getopt::Long;
use GUS::ObjRelP::DbiDatabase;
use GUS::Common::GusConfig;
use CBIL::Bio::SequenceUtils;

my ($verbose,$taxonId, $genomeExtRelDbId,$gusConfigFile,$allgenesSchema);
&GetOptions("verbose!"=> \$verbose,
            "allgenesSchema=s"=> \$allgenesSchema,
	    "taxonId=s" => \$taxonId,
	    "genomeExtRelDbId=s" => \$genomeExtRelDbId,
            "gusConfigFile=s" => \$gusConfigFile);


die "usage: makePromoterRegionTable --taxonId --genomeExtRelDbId --allgenesSchema --verbose --gusConfigFile [\$GUS_CONFIG_FILE]\n"
unless ($taxonId && $allgenesSchema && $genomeExtRelDbId);

print STDERR "Establishing dbi login\n" if $verbose;

my $gusconfig = GUS::Common::GusConfig->new($gusConfigFile);

my $db = GUS::ObjRelP::DbiDatabase->new($gusconfig->getDbiDsn(),
					$gusconfig->getDatabaseLogin(),
					$gusconfig->getDatabasePassword(),
					$verbose,0,1,
					$gusconfig->getCoreSchemaName());

my $dbh = $db->getQueryHandle();

my $tableName = "${allgenesSchema}.PromoterRegion";

my $deleteSql =
"delete from $tableName where taxon_id = $taxonId";
print STDERR "Deleting \n";
print STDERR "deleteSql: $deleteSql\n" if $verbose;

$dbh->do($deleteSql) || die "Delete failed.\nSQL: $deleteSql";
print STDERR "Committing delete\n";
$dbh->commit();


# forward strand
my $insertSql = 
"insert into $tableName 
    select distinct ba.query_na_sequence_id, vs.chromosome, ba.target_start, ba.target_end, '(+)' as strand,
       lower(dbms_lob.substr(vs.sequence, 1500, ba.target_start - 1200)) as sequence,$taxonId
    from DoTS.BlatAlignment ba, DoTS.VirtualSequence vs, DoTS.assembly a
    where ba.target_na_sequence_id = vs.na_sequence_id
    and ba.query_na_sequence_id = a.na_sequence_id
    and ba.query_table_id = 56
    and ba.is_reversed = 0
    and (ba.blat_alignment_quality_id in (1,2,3)  or
       (ba.blat_alignment_quality_id = 4 and ba.is_best_alignment = 1))
    and ba.query_taxon_id = $taxonId
    and ba.target_table_id = 245
    and ba.target_external_db_release_id = $genomeExtRelDbId
    ";

print STDERR "Inserting forward strand sequences\n";
print STDERR "insertSql: $insertSql\n" if $verbose;

$dbh->do($insertSql) || die "Insert failed.\nSQL: $insertSql";

# reverse strand
my $selectSql = 
"select distinct ba.query_na_sequence_id, vs.chromosome, ba.target_start, ba.target_end, '(-)' as strand,
       lower(dbms_lob.substr(vs.sequence, 1500, ba.target_end - 300)) as sequence,$taxonId
    from DoTS.BlatAlignment ba, DoTS.VirtualSequence vs, DoTS.assembly a
    where ba.target_na_sequence_id = vs.na_sequence_id
    and ba.query_na_sequence_id = a.na_sequence_id
    and ba.query_table_id = 56
    and ba.is_reversed = 1
    and (ba.blat_alignment_quality_id in (1,2,3)  or
       (ba.blat_alignment_quality_id = 4 and ba.is_best_alignment = 1))
    and ba.query_taxon_id = $taxonId
    and ba.target_table_id = 245
    and ba.target_external_db_release_id = $genomeExtRelDbId
    ";

print STDERR "Reversing and inserting reverse strand sequences\n";
print STDERR "Executing select statement\n";
print STDERR "selectSql: $selectSql\n" if $verbose;
my $stmt = $dbh->prepareAndExecute($selectSql);

print STDERR "Processing rows: reversing and inserting\n";
while (my @row = $stmt->fetchrow_array()) {
  my ($na_seq_id, $chr, $start, $end, $strand, $seq,$taxonId) = @row;
  $seq = &CBIL::Bio::SequenceUtils::reverseComplementSequence($seq);
  $insertSql = "insert into $tableName values ($na_seq_id, '$chr', $start, $end, '$strand', '$seq',$taxonId)";
  print STDERR "insertSql: $insertSql\n" if $verbose;
  $dbh->do($insertSql) || die "Insert failed.\nSQL: $insertSql";
}

print STDERR "Committing\n";
$dbh->commit();




