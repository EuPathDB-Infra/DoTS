#!@perl@
use strict;
use lib "$ENV{GUS_HOME}/lib/perl";
use Getopt::Long;
use GUS::ObjRelP::DbiDatabase;
use GUS::Common::GusConfig;


my ($verbose,$taxon,$gusConfigFile,$allgenesSchema);
&GetOptions("verbose!"=> \$verbose,
	    "taxon=i"=> \$taxon,
            "allgenesSchema=s"=> \$allgenesSchema,
            "gusConfigFile=s" => \$gusConfigFile);


die "usage: AssemblyTMDomainSummary --taxon --allgenesSchema --verbose --gusConfigFile [\$GUS_CONFIG_FILE]\n"
unless ($allgenesSchema && $taxon);

print STDERR "Establishing dbi login\n" if $verbose;

my $gusconfig = GUS::Common::GusConfig->new($gusConfigFile);

my $db = GUS::ObjRelP::DbiDatabase->new($gusconfig->getDbiDsn(),
					$gusconfig->getDatabaseLogin(),
					$gusconfig->getDatabasePassword(),
					$verbose,0,1,
					$gusconfig->getCoreSchemaName());

my $dbh = $db->getQueryHandle();

my $tableName = "${allgenesSchema}.AssemblyTMDomainSummary";

my $deleteSql =
"delete from $tableName where assembly_taxon_id = $taxon";
print STDERR "Deleting \n";
print STDERR "deleteSql: $deleteSql\n" if $verbose;

$dbh->do($deleteSql) || die "Delete failed.\nSQL: $deleteSql";

print STDERR "Committing delete\n";
$dbh->commit();

my $insertSql = 
"Insert into $tableName 
 SELECT pa.na_sequence_id, pa.taxon_id,paf.prediction_algorithm_id, COUNT(*),SYSDATE
 FROM ${allgenesSchema}.ProteinAssembly pa, dots.TranslatedAAFeature taf, dots.PredictedAAFeature paf
 WHERE pa.na_feature_id = taf.na_feature_id
 AND taf.aa_sequence_id = paf.aa_sequence_id
 AND paf.name = 'TMhelix' and pa.taxon_id = $taxon
 GROUP BY pa.na_sequence_id, pa.taxon_id, paf.prediction_algorithm_id";

print STDERR "Inserting \n";
print STDERR "insertSql: $insertSql\n" if $verbose;

$dbh->do($insertSql) || die "Insert failed.\nSQL: $insertSql";

print STDERR "Committing insert\n";
$dbh->commit();



