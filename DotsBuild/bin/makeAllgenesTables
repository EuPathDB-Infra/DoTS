#!@perl@
use strict;
use lib "$ENV{GUS_HOME}/lib/perl";
use Getopt::Long;
use GUS::ObjRelP::DbiDatabase;
use GUS::Common::GusConfig;

my ($verbose,$login,$password,$gusConfigFile);
&GetOptions("verbose!"=> \$verbose,
            "password=s" => \$password,
	    "login=s" => \$login,
            "gusConfigFile=s" => \$gusConfigFile);


die "usage: getIdsPerAssembly --login --password --verbose --gusConfigFile [\$GUS_CONFIG_FILE]\n" unless ($login && $password);

print STDERR "Establishing dbi login\n" if $verbose;

my $gusconfig = GUS::Common::GusConfig->new($gusConfigFile);

my $db = GUS::ObjRelP::DbiDatabase->new($gusconfig->getDbiDsn(),
					$login,
					$password,
					$verbose,0,1,
					$gusconfig->getCoreSchemaName());

my $dbh = $db->getQueryHandle();


my $table = $dbh->do("CREATE TABLE ${login}.PROTEINASSEMBLY (PROTEIN_ID   NUMBER(12),
                                          RNA_ID   NUMBER(12),
                                          NA_FEATURE_ID   NUMBER(12),
                                          NA_SEQUENCE_ID   NUMBER(12) NOT NULL,
                                          TAXON_ID   NUMBER(12) NOT NULL
                                         ) TABLESPACE RAID1
                                         STORAGE (MAXEXTENTS UNLIMITED)");

print "PROTEINASSEMBLY table created\n" if $table;


my $assembly = $dbh->do ("insert into ${login}.proteinassembly select /*+ rule */ null, null, null, na_sequence_id, taxon_id from dots.assembly");

print "$assembly na_sequence_id and taxon_id inserted into proteinassembly table\n" if  $assembly;

my $feature = $dbh->do ("update ${login}.proteinassembly pa set pa.na_feature_id = (select rf.na_feature_id from dots.rnafeature rf where rf.na_sequence_id = pa.na_sequence_id)");

print "$feature na_feature_id inserted into proteinassembly table\n" if  $feature;

my $rna = $dbh->do ("update ${login}.proteinassembly pa set pa.rna_id = (select rs.rna_id from dots.rnainstance rs where rs.na_feature_id = pa.na_feature_id)");

print "$rna rna_id inserted into proteinassembly table\n" if  $rna;

my $protein = $dbh->do ("update ${login}.proteinassembly pa set pa.protein_id = (select p.protein_id from dots.protein p where  p.rna_id = pa.rna_id)");

print "$protein protein_id inserted into proteinassembly table\n" if  $protein;

$dbh->commit();

my $protNotNull = $dbh->do ("alter table ${login}.proteinassembly modify (protein_id not null)");

print "protein_id not null\n" if $protNotNull;

my $rnaNotNull = $dbh->do ("alter table ${login}.proteinassembly modify (rna_id not null)");

print "rna_id not null\n" if $rnaNotNull;

my $featureNotNull = $dbh->do ("alter table ${login}.proteinassembly modify (na_feature_id not null)");

print "na_feature_id not null\n" if $featureNotNull;

my $index1 = $dbh->do ("CREATE INDEX ${login}.PROTEINASSEMBLY_IND01 on allgenes_60.proteinassembly (PROTEIN_ID) TABLESPACE INDX");

print "IND01 created\n" if $index1;

my $index2 = $dbh->do ("CREATE INDEX ${login}.PROTEINASSEMBLY_IND02 on allgenes_60.proteinassembly (PROTEIN_ID,TAXON_ID,NA_SEQUENCE_ID) TABLESPACE INDX");

print "IND02 created\n" if $index2;

my $index3 = $dbh->do ("CREATE INDEX ${login}.PROTEINASSEMBLY_IND03 on allgenes_60.proteinassembly (RNA_ID,TAXON_ID,NA_SEQUENCE_ID) TABLESPACE INDX");

print "IND03 created\n" if $index3;

my $analyze = $dbh->do ("ANALYZE TABLE ${login}.PROTEINASSEMBLY compute statistics");

print "table analyzed\n" if $analyze;

my $grant = $dbh->do ("grant select on ${login}.proteinassembly to public");

print "select\n" if $grant;


