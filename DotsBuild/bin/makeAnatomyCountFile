#!@perl@

# make a file mapping anatomy term to Anatomy id.
# start at a given place in the hierarchy.
# filter away terms which don't hit any assemblies (at the specified levels)

use strict;
use lib "$ENV{GUS_HOME}/lib/perl";
use Getopt::Long;
use GUS::ObjRelP::DbiDatabase;
use GUS::Common::GusConfig;


my ($verbose,$taxonId, $root, $rootLevel, $estCount, $percent, $filename, 
    $indent, $gusConfigFile);
&GetOptions("verbose!"=> \$verbose,
	    "taxonId=i"=> \$taxonId,
            "root=s"=> \$root,               # the name of the root, eg, 'brain'
            "rootLevel=s"=> \$rootLevel,     # its level in the anatomy hierarchy, eg 'level_4'
            "estCount=s"=> \$estCount,       # min number of ESTs in assembly
            "percent=s"=> \$percent,         # min percent of expression for assembly
            "indent!"=> \$indent,         # whether to indent or not
	    "outputfile=s"=>\$filename,
            "gusConfigFile=s" => \$gusConfigFile);


die "usage: makeAnatomyCountFile --taxonId --root --rootLevel --estCount --percent --outputfile --verbose [--indent] --gusConfigFile [\$GUS_CONFIG_FILE]\n"
unless ($root && $rootLevel && $estCount && $percent && $taxonId && $filename);

print STDERR "Establishing dbi login\n" if $verbose;

my $gusconfig = GUS::Common::GusConfig->new($gusConfigFile);

my $db = GUS::ObjRelP::DbiDatabase->new($gusconfig->getDbiDsn(),
					$gusconfig->getDatabaseLogin(),
					$gusconfig->getDatabasePassword(),
					$verbose,0,1,
					$gusconfig->getCoreSchemaName());

my $dbh = $db->getQueryHandle();


# build anatomy tree rooted in the provided root
# each element has:  term, id
my $tree = makeTree($root, $rootLevel, $percent, $estCount, $taxonId, $dbh);

# print only terms which have non-zero counts
print STDERR "Printing\n";
open(F, ">$filename");
printNode($tree, \*F, $indent);


########################  subroutines  #############################################

sub makeTree {
  my ($root, $rootLevel, $percent, $estCount, $taxonId, $dbh) = @_;

  # get all terms that have our root
  my $sql = "
select name, a.anatomy_id, a.parent_id, a.hier_level, count(aap.na_sequence_id)
from sres.anatomy a, dots.AssemblyAnatomyPercent aap
where $rootLevel = '$root'
and aap.anatomy_id = a.anatomy_id
and aap.percent >= $percent
and aap.est_count >= $estCount
and aap.taxon_id = $taxonId
group by name, a.anatomy_id, a.parent_id, a.hier_level
order by hier_level
";

  my %index;
  my $tree;
  my $stmt = $dbh->prepare($sql);

  print STDERR "Running query to make tree\n";
  $stmt->execute() || die "Couldn't execute $sql";
  print STDERR "\nSQL: $sql\n" if $verbose;

  print STDERR "Making tree\n";
  while (my ($name, $anatomyId, $parentId, $hierLevel, $count) = $stmt->fetchrow_array()) {
    my $me = {name => $name, id => $anatomyId, count => $count};
    $tree = $me unless $tree;
    $index{$anatomyId} = $me;
    my $parent = $index{$parentId};
    $parent->{kids} = [] unless $parent->{kids};
    push(@{$parent->{kids}}, $index{$anatomyId});
  }

  return $tree;
}

# Don't need this method because the AssemblyAnatomyPercent table is already recursive
sub propogateCounts {
  my ($node) = @_;

  $node->{recursiveCount} = $node->{count};
  foreach my $kid (@{$node->{kids}}) {
    propogateCounts($kid);
    $node->{recursiveCount} += $kid->{recursiveCount};
  }
}

sub printNode {
  my ($node, $filehandle, $indent, $indentation) = @_;

  print $filehandle "${indentation}$node->{name}\t$node->{id}\t$node->{count}\n";
  $indentation = "$indentation  " if $indent;
  foreach my $kid (@{$node->{kids}}) {
    printNode($kid, $filehandle, $indent, $indentation);
  }
}
