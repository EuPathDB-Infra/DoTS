#!@perl@
use strict;
use lib "$ENV{GUS_HOME}/lib/perl";
use Getopt::Long;
use GUS::ObjRelP::DbiDatabase;
use GUS::Common::GusConfig;
use CBIL::Bio::SequenceUtils;

my ($verbose,$musExtRelDbId,$humExtRelDbId,$gusConfigFile,$allgenesSchema);
&GetOptions("verbose!"=> \$verbose,
            "allgenesSchema=s"=> \$allgenesSchema,
	    "musExtRelDbId=s" => \$musExtRelDbId,
	    "humExtRelDbId=s" => \$humExtRelDbId,
            "gusConfigFile=s" => \$gusConfigFile);


die "usage: makeSignalPTable --allgenesSchema --humExtRelDbId --musExtRelDbId --verbose --gusConfigFile [\$GUS_CONFIG_FILE]\n"
unless ($musExtRelDbId && $humExtRelDbId && $allgenesSchema);

print STDERR "Establishing dbi login\n" if $verbose;

my $gusconfig = GUS::Common::GusConfig->new($gusConfigFile);

my $db = GUS::ObjRelP::DbiDatabase->new($gusconfig->getDbiDsn(),
					$gusconfig->getDatabaseLogin(),
					$gusconfig->getDatabasePassword(),
					$verbose,0,1,
					$gusconfig->getCoreSchemaName());

my $dbh = $db->getQueryHandle();

my $tableName = "${allgenesSchema}.AssemblySignalPSummary";

print STDERR "Dropping table $tableName\n";
$dbh->do("drop table $tableName");

my $createTblSql = 
"CREATE TABLE $tableName
   (ASSEMBLY_NA_SEQUENCE_ID NUMBER(12) NOT NULL,
    ASSEMBLY_TAXON_ID NUMBER(12) NOT NULL,
    MODIFICATION_DATE DATE,
    STORAGE (MAXEXTENTS UNLIMITED)";

print STDERR "CreateTblSql: $createTblSql\n" if $verbose;

print STDERR "Creating table  $tableName\n";
$dbh->do($createTblSql) || die "Failed creating table $tableName\n SQL: $createTblSql";

my $insertSql = 
"insert into $tableName 
    ";

print STDERR "Inserting \n";
print STDERR "insertSql: $insertSql\n" if $verbose;

$dbh->do($insertSql) || die "Insert failed.\nSQL: $insertSql";

print STDERR "Committing\n";
$dbh->commit();

print STDERR "Indexing\n";
my $indexSql = "CREATE INDEX ${tableName}_IND01 on $tableName (NA_SEQUENCE_ID) TABLESPACE INDX";
$dbh->do($indexSql) || die "Indexing failed.\nSQL: $indexSql";

print STDERR "Analyzing\n";
my $analyzeSql = "ANALYZE TABLE $tableName compute statistics";
$dbh->do($analyzeSql) || die "Analyze failed.\nSQL: $analyzeSql";

print STDERR "Granting\n";
my $grantSql = "grant select on $tableName to public";
$dbh->do($grantSql) || die "Grant failed.\nSQL: $grantSql";


