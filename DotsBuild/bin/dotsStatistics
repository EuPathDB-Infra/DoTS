#!/usr/bin/perl

## Brian Brunk 11/28/00
## re-organized by Steve Fischer 6/03

use strict;
use lib "$ENV{GUS_HOME}/lib/perl";
use Getopt::Long;
use GUS::ObjRelP::DbiDatabase;
use GUS::Common::GusConfig;

$| = 1;

my ($verbose, $createTmpTableOnly,$dbLogin,$dbPassword,
    $useExistingTmpTable, $goRowTemplateFile, $templateFile, $totalBarWidth);

&GetOptions("dbLogin=s" => \$dbLogin,
	    "dbPassword=s" => \$dbPassword,
            'verbose!' => \$verbose, 
            'useExistingTmpTable!' => \$useExistingTmpTable,
	    'goRowTemplateFile=s' => \$goRowTemplateFile,
	    'templateFile=s' => \$templateFile,
	    'goBarGraphWidth=s' => \$totalBarWidth
           );

&usage() unless ($dbLogin && $dbPassword && $goRowTemplateFile 
		&& $goRowTemplateFile && $totalBarWidth);

my $gusconfig = GUS::Common::GusConfig->new();

my $db = GUS::ObjRelP::DbiDatabase->new($gusconfig->getDbiDsn(),
					$dbLogin,
					$dbPassword,
					$verbose,0,1,
					$gusconfig->getCoreSchemaName());

my $dbh = $db->getQueryHandle();


## Get statistics by querying

&createTmpTable($dbh) unless $useExistingTmpTable;

my %stats;
eval {
  %stats = &getStats($dbh);
};

die "$@\n" if $@;

&dropTempTable($dbh) unless $useExistingTmpTable;

# push them into html template for presentation

my $template = &getTemplate($templateFile);
my $goRowTemplate = &getTemplate($goRowTemplateFile);


$stats{GODistr} = &formatGOTable($goRowTemplate,
				 $stats{humDoTSGOHash}, $stats{humDoTSGOTot},
				 $stats{musDoTSGOHash}, $stats{musDoTSGOTot},
				 $totalBarWidth);

my $report = &substituteValues($template, %stats);

print $report;


###################### subroutines  ###################################

sub usage {
  print STDERR "\nUsage: dotsStatistics --dbLogin --dbPassword --templateFile --goRowTemplateFile --goBarGraphWidth [--verbose] [--useExistingTmpTable] \n\n";
  exit(1);
}

sub createTmpTable {
  my ($dbh) = @_;

  print STDERR "Creating tmp table PrintStatsTmp\n";

  my $sql = 
"create table PrintStatsTmp as
select r.gene_id, a.na_sequence_id, a.number_of_contained_sequences,
       1 as total_seqs, a.taxon_id, p.protein_id
from Dots.RNA r, Dots.RNAInstance rs, Dots.NAFeature f, Dots.Assembly a,
     Dots.Protein p
where r.rna_id = rs.rna_id
and rs.rna_id = p.rna_id
and rs.na_feature_id = f.na_feature_id
and a.na_sequence_id = f.na_sequence_id
and a.taxon_id in (8,14)";
#and r.gene_id in (35588675,35732838)";  # for debugging

  my $rows = $dbh->do($sql);

  die "Couldn't create temp table PrintStatsTmp\n SQL: $sql" unless $rows;

  $dbh->commit();
  print STDERR "tmp table created..entered $rows rows\n";

  $sql =
"update PrintStatsTmp set total_seqs = 2
where gene_id in (
     select gene_id
     from PrintStatsTmp
     group by gene_id
     having sum(number_of_contained_sequences) > 1
)";

  print STDERR "  Updating total_seqs for non-sing: ".$dbh->do($sql)." rows\n";

  $dbh->commit();

  $sql = 
"update printstatstmp set total_seqs = 2
where na_sequence_id in (
      select na_sequence_id
      from dots.assembly
      where contains_mrna = 1 )
and total_seqs = 1";

  ##want to update total_seqs to two where sequence is singleton but mRNA
  print STDERR "  Updating total_seqs for mRNAs: ".$dbh->do($sql)." rows\n";
  $dbh->commit();
  print STDERR "  Updating number_of_contained_sequences: ".$dbh->do("update PrintStatsTmp set number_of_contained_sequences = 2 where number_of_contained_sequences > 1")." rows\n";
  $dbh->commit();
  ##create indexes to facilitate queries
  $dbh->do("create index tran_id_ind on printstatstmp (gene_id)");
  $dbh->do("create index na_id_ind on printstatstmp (na_sequence_id)");
  $dbh->do("create index p_id_ind on printstatstmp (protein_id)");
  $dbh->commit();
}

sub dropTempTable {
  my ($dbh) = @_;

  print STDERR "Dropping temp table\n";
  $dbh->do("drop table PrintStatsTmp"); 
  $dbh->commit();
}

sub getStats {
  my ($dbh) = @_;

  my %v;  # the values

  ($v{humAssSeqs}, $v{totHumAssem}, $v{musAssSeqs}, $v{totMusAssem}) =
    &countAssembliesAndTheirSeqs($dbh);

  ($v{humNonSingletons}, $v{musNonSingletons}) = &countNonSingletons($dbh);

  ($v{humDoTSGenes}, $v{musDoTSGenes}) = &countDoTSGenes($dbh);

#  ($v{humGeneGoodAlign}, $v{musGeneGoodAlign}) = &countGenesWithGoodAlignment($dbh);

#  ($v{humNonSingGoodAlign},$v{humTotGoodAlign},
#   $v{musNonSingGoodAlign},$v{musTotGoodAlign}) = &countDoTSWithGoodAlignment($dbh);

  ($v{humKnownGenes}, $v{musKnownGenes}) = &countKnownGenes($dbh);

  ($v{humKnownNonSingDoTs}, $v{humKnownDoTs},
   $v{musKnownNonSingDoTs}, $v{musKnownDoTs}) = &countKnownDoTs($dbh);

  ($v{humGOGenes}, $v{musGOGenes}) = &countGOGenes($dbh);

  ($v{humGONonSingDoTs}, $v{humGODoTs}, $v{musGONonSingDoTs}, $v{musGODoTs}) =
      &countGODoTs($dbh);

  ($v{humDoTSGOHash}, $v{humDoTSGOTot},$v{musDoTSGOHash}, $v{musDoTSGOTot}) = 
    &getGODistribution($dbh);

  $v{date} = &getDate();

  return %v;
}

sub formatGOTable {
  my ($rowTemplate, $humDoTSGOHash, $humDoTSGOTot,$musDoTSGOHash, 
      $musDoTSGOTot, $totalBarWidth) = @_;

  print STDERR "Formatting GO Distribution Table\n";

  my @sortedGoFuncs = 
    sort { $humDoTSGOHash->{$b} <=> $humDoTSGOHash->{$a} } keys %$humDoTSGOHash;

  my $tableString;
  foreach my $funcKey (@sortedGoFuncs) {
      my($goTermId, $func) = ($funcKey =~ /^(\d+)\|(.*)$/);
      my $funcBrief = $func;
      $funcBrief = substr($func,0,30) . "..." if (length($func) > 30);
      my %values = &findGOValues($funcBrief,
				 $goTermId,
				 $humDoTSGOHash->{$funcKey}, $humDoTSGOTot,
				 $musDoTSGOHash->{$funcKey}, $musDoTSGOTot,
				 $totalBarWidth
				 );
      my $rowString = &substituteValues($rowTemplate, %values);
      $tableString .= $rowString;
  }
  return $tableString;
}

# expected values:
# funcname,
# humCount, humBarWidth, humBarRemainder, humPercent,
# musCount, musBarWidth, musBarRemainder, musPercent,
sub findGOValues {
  my ($func, $goTermId, $humCount, $humTotal, $musCount, $musTotal, $totalBarWidth) = @_;

  my %values;

  $values{funcname} = $func;
  $values{goTermId} = $goTermId;
  $values{humCount} = $humCount? $humCount : 0;
  $values{musCount} = $musCount? $musCount : 0;
  $values{humPercent} = &findPercent($values{humCount}, $humTotal);
  $values{musPercent} = &findPercent($values{musCount}, $musTotal);

  ($values{humBarWidth}, $values{humBarRemainder}) =
    findWidths($values{humCount}, $humTotal, $totalBarWidth);
  ($values{musBarWidth}, $values{musBarRemainder}) =
    findWidths($values{musCount}, $musTotal, $totalBarWidth);

  return %values;
}

sub findPercent {
  my($count, $total) = @_;
  $total = $total ? $total : 1;
  my $p = $count/$total*100;
  $p =~ s/^(\d+\.\d).*/$1/;
  return $p;
}

sub findWidths {
  my($count, $total, $totalBarWidth) = @_;

  $total = $total ? $total : 1;

  my $width = int($count/$total*$totalBarWidth);
  $width = 1 unless $width;

  return ($width, $totalBarWidth - $width);
}

sub getTemplate {
  my ($templateFile) = @_;

  print STDERR "Reading template file $templateFile\n";
  my $template;
  open(F,$templateFile) || die "Can't open html template file '$templateFile'\n";
  while(<F>) {
    $template .= $_;
  }
  return $template;
}

sub substituteValues {
  my ($template, %values) = @_;

  my $t = $template;
  foreach my $key (keys(%values)) {
    $t =~ s/XX${key}XX/$values{$key}/;
  }
  return $t;
}

sub countAssembliesAndTheirSeqs {
  my ($dbh) = @_;

  print STDERR "Retrieving number of AssemblySequences...\n" ;

  my $stmt = $dbh->prepare("select a.taxon_id,sum(a.number_of_contained_sequences),count(*) from Dots.Assembly a group by a.taxon_id");
  $stmt->execute();

  my ($humAssSeqs, $totalHumAssemblies, $musAssSeqs, $totalMusAssemblies);
  while (my($taxon_id,$num,$count) = $stmt->fetchrow_array()) {
    if ($taxon_id == 8) {
      $humAssSeqs = $num;
      $totalHumAssemblies = $count;
    } elsif ($taxon_id == 14) {
      $musAssSeqs = $num;
      $totalMusAssemblies = $count;
    }
  }
  print STDERR "...done\n";
  return  ($humAssSeqs, $totalHumAssemblies, $musAssSeqs, $totalMusAssemblies);
}

sub countNonSingletons {
  my ($dbh) = @_;

  print STDERR "Retrieving number of non-singletons...\n" ;

  my $stmt = $dbh->prepareAndExecute("select taxon_id,count(*) from Dots.Assembly where number_of_contained_sequences > 1 group by taxon_id");

  my ($humNonSingletons, $musNonSingletons);
  while (my($taxon_id,$nonSing) = $stmt->fetchrow_array()) {
    if ($taxon_id == 8) {
      $humNonSingletons = $nonSing;
    } elsif ($taxon_id == 14) {
      $musNonSingletons = $nonSing;
    }
  }
  print STDERR "  Human: $humNonSingletons\n  Mouse: $musNonSingletons\n\n" ;

  return ($humNonSingletons, $musNonSingletons);

}

sub countDoTSGenes {
  my ($dbh) = @_;

  ##now the number of DoTS genes....
  my $stmt = $dbh->prepare("select taxon_id,count(distinct gene_id) from PrintStatsTmp where total_seqs > 1 group by taxon_id");
  print STDERR "Retrieving number of DoTS genes\n" ;
  $stmt->execute();

  my ($humDoTSGenes, $musDoTSGenes);
  while (my($taxon_id,$num) = $stmt->fetchrow_array()) {
    if ($taxon_id == 8) {
      $humDoTSGenes = $num;
    } elsif ($taxon_id == 14) {
      $musDoTSGenes = $num;
    }
  }
  print STDERR "  Human: $humDoTSGenes\n  Mouse: $musDoTSGenes\n\n" ;

  return ($humDoTSGenes, $musDoTSGenes);

}

sub countGenesWithGoodAlignment {
  my ($dbh) = @_;

  ##now want to get the number of consistent DoTS alignments on genomic sequence...only for human...
  my $stmt = $dbh->prepare("select taxon_id,count(distinct gene_id)
 from PrintStatsTmp t, Dots.ConsistentAlignment c
 where t.total_seqs > 1
 and c.transcript_na_sequence_id = t.na_sequence_id
 and c.is_consistent = 1
 group by taxon_id");
  print STDERR "Retrieving number of Consistent DoTS genes\n";
  $stmt->execute();

  my ($humDoTSConsGenes, $musDoTSConsGenes);
  while (my($taxon_id,$num) = $stmt->fetchrow_array()) {
    if ($taxon_id == 8) {
      $humDoTSConsGenes = $num;
    } elsif ($taxon_id == 14) {
      $musDoTSConsGenes = $num;
    }
  }
  print STDERR "  Human: $humDoTSConsGenes\n  Mouse: $musDoTSConsGenes\n\n" ;

  return ($humDoTSConsGenes, $musDoTSConsGenes);
}

sub countDoTSWithGoodAlignment {
  my ($dbh) = @_;

  ##now the number of consistent DoTS and Assemblies...
  my $stmt = $dbh->prepare("select taxon_id,number_of_contained_sequences,count(*)
 from PrintStatsTmp t, Dots.ConsistentAlignment c
 where c.transcript_na_sequence_id = t.na_sequence_id
 and c.is_consistent = 1
 group by taxon_id,number_of_contained_sequences");
  print STDERR "Retrieving number of Consistent DoTS sequences\n" ;
  $stmt->execute();

  my ($humConsAssemblies, $humConsDoTS, $musConsAssemblies, $musConsDoTS);
  while (my($taxon_id,$num_seqs,$count) = $stmt->fetchrow_array()) {
    if ($taxon_id == 8) {
      if ($num_seqs == 2) {
	$humConsAssemblies = $count;
      }
      $humConsDoTS += $count;	##total number...
    } elsif ($taxon_id == 14) {
      if ($num_seqs == 2) {
	$musConsAssemblies = $count;
      }
      $musConsDoTS += $count;	##total number...
    }
  }
  print STDERR "  Human: $humConsDoTS, $humConsAssemblies \n  Mouse: $musConsDoTS, $musConsAssemblies\n\n" ;

  return ($humConsAssemblies, $humConsDoTS, $musConsAssemblies, $musConsDoTS);
}

sub countKnownGenes {
  my ($dbh) = @_;

  ## Now determine the "known" Genes ...
  print STDERR "Determining number of DoTS genes with NR neigbors:\n" ;
  my $stmt = $dbh->prepare("select pst.taxon_id,count(distinct pst.gene_id) from PrintStatsTmp pst, Dots.Similarity s where s.query_table_id = 56 and s.query_id = pst.na_sequence_id and s.subject_table_id = 83 and pst.total_seqs > 1 group by pst.taxon_id");
  $stmt->execute();

  my ($humGenesWithNR, $musGenesWithNR);
  while (my($taxon_id,$totGenes) = $stmt->fetchrow_array()) {
    if ($taxon_id == 8) {
      $humGenesWithNR = $totGenes;
    } elsif ($taxon_id == 14) {
      $musGenesWithNR = $totGenes;
    }
  }
  print STDERR "  Human: $humGenesWithNR\n  Mouse: $musGenesWithNR\n\n" ;

  return ($humGenesWithNR, $musGenesWithNR);
}

sub countKnownDoTs {
  my ($dbh) = @_;

  ##now assemblies ...
  print STDERR "Determining number of DoTS assemblies with NR neigbors:\n" ;
  my $stmt = $dbh->prepare("select a.taxon_id,a.number_of_contained_sequences,count(distinct a.na_sequence_id) from PrintStatsTmp a, Dots.Similarity s where s.query_table_id = 56 and s.query_id = a.na_sequence_id and s.subject_table_id = 83 group by a.taxon_id,a.number_of_contained_sequences");
  $stmt->execute();

  my ($humAssWithNR, $humDoTSWithNR, $musAssWithNR, $musDoTSWithNR);
  while (my($taxon_id,$num_seqs,$num) = $stmt->fetchrow_array()) {
    if ($taxon_id == 8) {
      $humAssWithNR = $num unless $num_seqs == 1;
      $humDoTSWithNR += $num;
    } elsif ($taxon_id == 14) {
      $musAssWithNR = $num unless $num_seqs == 1;
      $musDoTSWithNR += $num;
    }
  }
  print STDERR "  Human: Assem: $humAssWithNR, DoTS: $humDoTSWithNR\n  Mouse: Assem: $musAssWithNR, DoTS: $musDoTSWithNR\n\n" ;
  return ($humAssWithNR, $humDoTSWithNR, $musAssWithNR, $musDoTSWithNR);

}

sub countGOGenes {
  my ($dbh) = @_;

  print STDERR "Determining number of DoTS genes with GoFunctions:\n" ;

  my $sql =
"select pst.taxon_id, count(distinct pst.gene_id) 
from PrintStatsTmp pst, Dots.GOAssociation ga
where pst.total_seqs > 1 
and ga.row_id = pst.protein_id 
and ga.table_id = '180'
and ga.is_deprecated = 0 
and ga.is_not = 0
group by pst.taxon_id";

  my $stmt = $dbh->prepare($sql);
  $stmt->execute();

  my ($humGenesWithGOFunction, $musGenesWithGOFunction);
  while (my($taxon_id,$totGenes) = $stmt->fetchrow_array()) {
    if ($taxon_id == 8) {
      $humGenesWithGOFunction = $totGenes;
    } elsif ($taxon_id == 14) {
      $musGenesWithGOFunction = $totGenes;
    }
  }
  print STDERR "  Human: $humGenesWithGOFunction Mouse: $musGenesWithGOFunction\n\n" ;
  return ($humGenesWithGOFunction, $musGenesWithGOFunction);
}


sub countGODoTs {
  my ($dbh) = @_;

  print STDERR "Determining number of DoTS Assemblies with GoFunctions:\n" ;

  my $sql =
"select pst.taxon_id, pst.number_of_contained_sequences, 
        count(distinct pst.na_sequence_id) 
from PrintStatsTmp pst, Dots.GOAssociation ga
where pst.total_seqs > 1 
and ga.row_id = pst.protein_id 
and ga.table_id = '180'
and ga.is_deprecated = 0 
and ga.is_not = 0
group by pst.taxon_id, pst.number_of_contained_sequences";

  my $stmt = $dbh->prepare($sql);

  $stmt->execute();

  my ($humAssWithGOFunction, $humDoTSWithGOFunction, 
      $musAssWithGOFunction,$musDoTSWithGOFunction);

  while (my($taxon_id,$num_seqs,$num) = $stmt->fetchrow_array()) {
    if ($taxon_id == 8) {
      $humAssWithGOFunction = $num unless $num_seqs == 1;
      $humDoTSWithGOFunction += $num;
    } elsif ($taxon_id == 14) {
      $musAssWithGOFunction = $num unless $num_seqs == 1;
      $musDoTSWithGOFunction += $num;
    }
  }
  print STDERR "  Human: Assem: $humAssWithGOFunction, DoTS: $humDoTSWithGOFunction, Mouse: Assem: $musAssWithGOFunction, DoTS: $musDoTSWithGOFunction\n\n" ;

  return ($humAssWithGOFunction, $humDoTSWithGOFunction, 
	  $musAssWithGOFunction,$musDoTSWithGOFunction);
}

sub getGODistribution {
  my ($dbh) = @_;

  print STDERR "Determining breakdown of GOFunctions for DoTS Genes:\n";

  my $sql = 
"select pst.taxon_id, t.name, t.go_term_id, count(distinct pst.gene_id)
   from PrintStatsTmp pst, Dots.GOAssociation ga, SRes.GOTerm t
   where pst.total_seqs > 1
   and ga.table_id = 180
   and ga.row_id = pst.protein_id
   and ga.go_term_id = t.go_term_id
   and ga.is_deprecated = 0 
   and ga.is_not = 0
   and t.external_database_release_id = 6918
   and t.name in
('enzyme activity',
'antioxidant activity',
'anticoagulant activity',
'storage protein',
'cell adhesion molecule activity',
'structural molecule activity',
'apoptosis regulator activity',
'transporter activity',
'cytoskeletal regulator activity',
'toxin activity',
'protein tagging activity',
'chaperone regulator activity',
'enzyme regulator activity',
'binding activity',
'signal transducer activity',
'nucleic acid binding activity',
'cell cycle regulator',
'chaperone activity',
'motor activity',
'defense/immunity protein activity')
group by pst.taxon_id, t.name, t.go_term_id ";

  my $stmt = $dbh->prepare($sql);
  $stmt->execute();

  my %humDoTSGOFun;
  my %musDoTSGOFun;
  my ($totalDoTShumGOFun, $totalDoTSmusGOFun);
  while (my($taxon_id,$name,$go_term_id,$count) = $stmt->fetchrow_array()) {
    next if $name eq 'obsolete' || $name =~ /unknown/;
    if ($taxon_id == 8) {
      $humDoTSGOFun{$go_term_id . "|" . $name} = $count;
      $totalDoTShumGOFun += $count;
    } elsif ($taxon_id == 14) {
      $musDoTSGOFun{$go_term_id . "|" . $name} = $count;
      $totalDoTSmusGOFun += $count;
    }
  }

  foreach my $a (keys %humDoTSGOFun) {
    print STDERR "  $a: human=$humDoTSGOFun{$a}, mus=$musDoTSGOFun{$a}\n";
  }

  return (\%humDoTSGOFun, $totalDoTShumGOFun,
    \%musDoTSGOFun, $totalDoTSmusGOFun);
}

sub getDate {
  my @date = split(/\s+/,`date`);
  return "$date[1] $date[2], $date[5]";
}

1;
