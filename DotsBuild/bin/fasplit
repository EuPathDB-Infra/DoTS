#!@perl@

use strict 'vars';


use lib "$ENV{GUS_HOME}/lib/perl";
use CBIL::Util::EasyCsp;
use FileHandle;

my $usage = 'Splits FASTA files into multiple pieces';

my @options = ( { h => 'input file',
									t => 'string',
									o => 'InputFile',
								},

								{ h => 'sequences per file',
									t => 'integer',
									d => 500,
									o => 'ChunkSize',
								},

								{ h => 'output file format',
									t => 'string',
									o => 'OutputFileFormat',
								}
							);
my $ecd = { map {($_->{o},$_)} @options };

my $C = CBIL::Util::EasyCsp::DoItAll( $ecd, $usage ) || exit 1;

# output files stuff
my $o_n;
my $o_c;
my $o_f;
my $o_fh;

# state
my $def;
my $seq;

# input
if (my $i_fh = FileHandle->new("<$C->{InputFile}")) {
	 while (<$i_fh>) {
			chomp;
			if ( /^>/ ) {
				 Process( $C,$def,$seq );
				 $def = $_;
				 $seq = '';
			}
			else {
				 $seq .= $_;
			}
	 }
	 Process( $C,$def,$seq );
}
else {
	 print "No $C->{InputFile}: $!";
}

# ----------------------------------------------------------------------

sub Process {
	my $C = shift;
	my $D = shift;
	my $S = shift;

	# count sequence
	$o_n++;

	# close file if we've filled it.
	if ($o_n % $C->{ChunkSize} == 0) {
		 $o_fh->close if $o_fh;
		 undef $o_fh;
	}

	# open file if it's not open
	if (!$o_fh) {
		 $o_c = int($o_n/$C->{ChunkSize})+1;
		 $o_f = sprintf($C->{OutputFileFormat}, $o_c);
		 unless ($o_fh = FileHandle->new(">$o_f")) {
				print "No $o_f: $!";
				exit 0;
		 }
	}
	
	# defline
	print $o_fh "$D\n$S\n";
}





