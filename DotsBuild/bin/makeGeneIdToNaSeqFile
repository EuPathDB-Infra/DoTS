#!@perl@


use strict;
use lib "$ENV{GUS_HOME}/lib/perl";
use Getopt::Long;
use GUS::ObjRelP::DbiDatabase;
use GUS::Common::GusConfig;

my ($verbose, $inputFile,$tax_id,$taxon_id,$gusConfigFile);

&GetOptions("verbose!"=> \$verbose,
            "inputFile=s" => \$inputFile,
	    "tax_id=i" => \$tax_id,
	    "taxon_id=i" => \$taxon_id,
	    "gusConfigFile=s" => \$gusConfigFile);

my $usage = "usage: makeGeneIdToNaSeqFile --inputFile  --tax_id ncbi taxon identifier --verbose 

Create mapping between GeneId and na_sequence_ids.  

Input is a 12 column tab delimited file, where each row is: 
tax_id gen_id status rna_acc.version rna_gi protein_acc.version protein_gi genome_acc.version genome_gi start_on_genome end_on_genome orientation 

human tax_id=9606
mouse tax_id=10090
mRNA designation=m

Output is 2 column tab delimited, where each row is:
gene_id na_sequence_id\n";


die "$usage" unless ($inputFile && $tax_id && $taxon_id);


print STDERR "Establishing dbi login\n" if $verbose;

my $gusconfig = GUS::Common::GusConfig->new($gusConfigFile);

my $db = GUS::ObjRelP::DbiDatabase->new($gusconfig->getDbiDsn(),
					$gusconfig->getReadOnlyDatabaseLogin(),
					$gusconfig->getReadOnlyDatabasePassword(),
					$verbose,0,1,
					$gusconfig->getCoreSchemaName());
my $dbh = $db->getQueryHandle();

my $fileHash = &readFile($inputFile,$tax_id);
&getNaSeq($dbh,$fileHash,$taxon_id);
&printHash($fileHash);

sub readFile {

  my ($infile,$tax_id) = @_;
  print STDERR "Reading input file\n";
  my %filehash;
  open (IN, $infile) || die "Can't open $infile\n";
  my $count;
  while (<IN>) {
    chomp;
    my @arr = split(/\t/,$_);
    next if ($arr[0] != $tax_id || !$arr[3] || $arr[3] eq '-');
    $arr[3] =~ s/\.\d+//;
    $filehash{$arr[3]}[0]=$arr[1];
    $count++;
    print STDERR "$count geneids with mRNA accessions processed\n" if $count % 1000 == 0;
  }
  close (IN);
  print STDERR "$count total geneids with mRNA accessions processed\n" ;
  return \%filehash;
}

sub getNaSeq {
  my ($dbh,$filehash,$taxon_id) = @_;
   print STDERR "Getting na_sequence_ids\n";
  my $count = 0;
  #my $sql = "select na_sequence_id from dots.ExternalNASequence where taxon_id = $taxon_id and source_id = ?";
  my $sql = "select source_id,na_sequence_id from dots.ExternalNASequence where taxon_id = $taxon_id";
  print STDERR "Query: $sql\n";
  #my $stmt = $dbh->prepare($sql);
  my $stmt = $dbh->prepareAndExecute($sql);
  #foreach my $acc (keys %$filehash) {
   # print STDERR "$acc\n";
   # $stmt->execute($acc);
   # my ($na_seq_id) = $stmt->fetchrow_array();
   # print STDERR "$na_seq_id\n";
   # if ($na_seq_id) {
   #   $filehash->{$acc}->[1] = $na_seq_id;
   #   $stmt->finish();
    #  $count++;
     # print STDERR "$count accessions have na_sequence_ids\n" if $count % 1000 == 0;
    #}
    #else {
    #  print STDERR "$acc does not have an na_sequence_id\n";
    #}
  #}
  while (my ($source_id,$na_seq_id) = $stmt->fetchrow_array()) {
    if ($filehash->{$source_id}->[0] >=1) {
      $filehash->{$source_id}->[1] = $na_seq_id;
      $count++;
      print STDERR "$count accessions have na_sequence_ids\n" if $count % 1000 == 0;
    }
  }
  print STDERR "$count total accessions have na_sequence_ids\n";
}


sub printHash {

  my ($filehash) = @_;
  print STDERR "printing tab delimited geneId to na_sequence_id map\n";
  my $count=0;
  foreach my $acc (keys %$filehash) {
    my $geneId = $filehash->{$acc}->[0];
    my $naSeq = $filehash->{$acc}->[1];
    print STDOUT "$geneId\t$naSeq\n" if $naSeq;
    $count++ if $naSeq;
  }
  print STDERR "$count rows printed\n";
}


$db->logout();


