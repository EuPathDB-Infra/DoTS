#! /usr/bin/perl

use strict 'vars';
use lib "$ENV{GUS_HOME}/lib/perl";
use GUS::ObjRelP::DbiDatabase;
use GUS::Common::GusConfig;
use CBIL::Util::Disp;
use CBIL::Util::EasyCsp;
use FileHandle;

my $gusConfigFile;

my $verbose;

my $gusconfig = GUS::Common::GusConfig->new($gusConfigFile);

my $db = GUS::ObjRelP::DbiDatabase->new($gusconfig->getDbiDsn(),
					$gusconfig->getReadOnlyDatabaseLogin(),
					$gusconfig->getReadOnlyDatabasePassword(),
					$verbose,0,1,
					$gusconfig->getCoreSchemaName());

# ----------------------------------------------------------------------

sub get_cla {
	 my $usage = 'parses signalp or tmm* files to produce tab-delimited files';
	 my @options = ( { h => 'read AA sequences from this file',
										 t => 'string',
										 o => 'AaSequenceFile',
									 },

									 { h => 'read output files from this path',
										 t => 'string',
										 o => 'PredictionPath',
									 },

									 { h => 'process this kind of prediction',
										 t => 'string',
										 o => 'Type',
									 },

									 { h => 'write output files here',
										 t => 'string',
										 o => 'OutputPath',
									 },
								 );
	 my $ecd = { map {($_->{o},$_)} @options };
	 return CBIL::Util::EasyCsp::DoItAll($ecd,$usage) || exit 0;
}

# ----------------------------------------------------------------------

sub load_aa_file {
	 my $C = shift;
	 my $F = shift;
	 my $seqs_n = 0;

	 my $dbh = $db->getQueryHandle();

	 my $sql = "select t.aa_sequence_id from dots.translatedaafeature t, dots.nafeature n where n.na_feature_id = t.na_feature_id and n.na_sequence_id = ?";

	 my $stmt = $dbh->prepare($sql);
	 

	 if (my $fh = FileHandle->new("<$F")) {

			# {def} = sequence
			my $rv;
			my $pep_id;
			while (<$fh>) {
				 chomp;
				 if (/^>/) {
						my $def = $_;
						$def =~ /(DT\.\d+)/;
						my $dots_id = $1;
						my $id = $dots_id;
						$id =~ s/DT\.//;
						$stmt->execute($id);
						$pep_id = $stmt->fetchrow_array();
						$stmt->finish();
						$rv->{$dots_id} = $pep_id;
						$rv->{$pep_id}   = '';

						$seqs_n++;
						print STDERR "$seqs_n\n" if $seqs_n % 1000 == 0 && $C->{verbose};
				 }
				 else {
						$rv->{$pep_id} .= $_;
				 }
			}
			$fh->close;

			return $rv;
	 }
	 else {
			die "Could not open aa file '$F': $!";
	 }
}

# ----------------------------------------------------------------------

sub open_file {
	 my $File = shift;

	 print STDERR "$File\n";

	 if ($File =~ /\.Z$/) {
			return FileHandle->new("zcat $File|");
	 }
	 else {
			return FileHandle->new("<$File");
	 }
}

# ----------------------------------------------------------------------

sub parseSgp {
	 my $filename   = shift;
	 my $aasequence = shift;
	 my $Output_Fh  = shift;

	 my $line;
	 my $quality = 0;
	 my ($maxC_position, $maxC_value,  $maxC_cutoff,  $maxC_conclusion);
	 my ($maxY_position, $maxY_value,  $maxY_cutoff,  $maxY_conclusion);
	 my ($maxS_position, $maxS_value,  $maxS_cutoff,  $maxS_conclusion);
	 my ($meanS_position, $meanS_value,  $meanS_cutoff,  $meanS_conclusion);
	 my ($meanS_start,$meanS_stop);
	 my $strand=".";
	 my $frame=".";
	 my $attribute;
	 #my $file=basename($filename);

	 # def line of aa sequence since we have multiple sequences per file
	 my $def;
	 my $dots_id;
	 my $pep_id;

	 # open the file.
	 my $fh = open_file($filename);

	 while (<$fh>) {
			chomp;

			# save defline for sequences retrieval
			if (/^>(DT\.\d+)/) {
				 $dots_id = $1;
				 $pep_id = $aasequence->{$dots_id};
			}

			elsif ($_=~/max\..C/) {
				 $line=$_;
				 $line=~s/\s+$&\s+//;
				 ($maxC_position, $maxC_value,  $maxC_cutoff,  $maxC_conclusion)= (split /\s+/,$line);
				 if ($_=~/YES/) {
						$quality++;
				 }
				 ;
			}

			elsif ($_=~/max\..Y/) {
				 $line=$_;
				 $line=~s/\s+$&\s+//;
				 ($maxY_position, $maxY_value,  $maxY_cutoff,  $maxY_conclusion)= (split /\s+/,$line);
				 if ($_=~/YES/) {
						$quality++;
				 }
				 ;
			}

			elsif ($_=~/max\..S/) {
				 $line=$_;
				 $line=~s/\s+$&\s+//;
				 ($maxS_position, $maxS_value,  $maxS_cutoff,  $maxS_conclusion)= (split /\s+/,$line);
				 if ($_=~/YES/) {
						$quality++;
				 }
				 ;
			}

			elsif ($_=~/mean.S/) {
				 $line=$_;
				 $line=~s/\s+$&\s+//;
				 ($meanS_position, $meanS_value,  $meanS_cutoff,  $meanS_conclusion)= split(/\s+/,$line);
				 ($meanS_start,$meanS_stop)= (split /-/,$meanS_position);
				 if ($_=~/YES/) {
						$quality++;
				 }
				 ;

				 my $signal=substr($aasequence->{$pep_id},($meanS_start -1 ),($meanS_stop - $meanS_start +1));

				 print $Output_Fh
				 join("\t",
							$pep_id, 'SignalP', 'SIGNAL',
							$maxC_position, $maxC_value, $maxC_cutoff, $maxC_conclusion,
							$maxY_position, $maxY_value, $maxY_cutoff, $maxY_conclusion,
							$maxS_position, $maxS_value, $maxS_cutoff, $maxS_conclusion,
							$meanS_start, $meanS_stop, $meanS_value, $meanS_cutoff, $meanS_conclusion,
							$quality, $signal
						 ). "\n";

 				 $quality = 0;
			}
	 }


}

# ----------------------------------------------------------------------

sub parseSgpHmm{
	 my $filename   = shift;
	 my $aasequence = shift;
	 my $Output_Fh  = shift;

	 my $line;
	 my $strand=".";
	 my $frame=".";
	 my $attribute;
	 #my $file=basename($filename);
	 my $prediction;
	 my $SPP;
	 my $SAP;
	 my $CSP;
	 my ($start,$stop);


	 ##Example:
	 # Prediction: Non-secretory protein
	 # Signal peptide probability: 0.000
	 # Signal anchor probability: 0.000
	 # Max cleavage site probability: 0.000 between pos. 20 and 21

	 # def line of aa sequence since we have multiple sequences per file
	 my $dots_id;
	 my $pep_id;

	 # open the file.
	 my $fh = open_file($filename);

	 while (<$fh>) {
			chomp;

			# save defline for sequences retrieval
			if (/^>(DT.\d+)/) {
				 $dots_id = $1;
				 $pep_id = $aasequence->{$dots_id};
			}

			elsif ($_=~m/^Prediction:\s*(.*)/i) {
         $prediction=$1;
			}

			elsif ($_=~m/Signal peptide probability:\s*(.*)/i) {
         $SPP=$1;
			}

			elsif ($_=~m/Signal anchor probability:\s*(.*)/i) {
         $SAP=$1;
			}

			elsif ($_=~m/Max cleavage site probability:\s*(.*)\s*between pos\.\s*(.*)\s*and\s*(.*)/i) {
				 $CSP=$1;
				 $start=$2;
				 $stop=$3;

				 my $signal = substr($aasequence->{$pep_id}, 0, ($start -1));

				 print $Output_Fh  join("\t",
																$pep_id, 'SignalPHMM', 'SIGNAL',
																$prediction, $SPP, $SAP, $CSP, $start, $signal). "\n";
			}
	 }


	 return
}

# ----------------------------------------------------------------------

sub parseTmHmm{
	 my $filename   = shift;
	 my $aasequence = shift;
	 my $Output_Fh  = shift;

	 my $out="";
	 my $file=$filename;
	 $file=~s/\.pep$//i;
	 my $strand=".";
	 my $frame=".";
	 my $attribute;

	 # EXAMPLE:
	 ## chr1_1.gen_13.pep Length: 316
	 ## chr1_1.gen_13.pep Number of predicted TMHs:  2
	 #chr1_1.gen_13.pep       TMHMM2.0        inside       1   130
	 #chr1_1.gen_13.pep       TMHMM2.0        TMhelix    131   153
	 #chr1_1.gen_13.pep       TMHMM2.0        outside    154   273
	 #chr1_1.gen_13.pep       TMHMM2.0        TMhelix    274   296
	 #chr1_1.gen_13.pep       TMHMM2.0        inside     297   316

	 # def line of aa sequence since we have multiple sequences per file
	 my $def;

	 # open the file.
	 my $fh = open_file($filename);
	 while (<$fh>) {
			next if (/^\#/);
			my ($dots_id, $algorithm, $verdict, $start, $stop) = split(/\s+/);
			next unless ($verdict=~m/TMhelix/i);
			my $pep_id = $aasequence->{$dots_id};
			print $Output_Fh join("\t", $pep_id, $algorithm, 'TMH',
														$start, $stop, 'n/a', $strand, $frame, $attribute). "\n";
	 }
	 $fh->close;
}

# ----------------------------------------------------------------------

my $c = get_cla();

my $aa_sq = load_aa_file($c, $c->{AaSequenceFile});

CBIL::Util::Disp::Display($aa_sq) if $c->{verbose} && $c->{debug};

my $out_fh = FileHandle->new('>-');

my @files = glob($c->{PredictionPath});
CBIL::Util::Disp::Display(\@files) if $c->{verbose} && $c->{debug};

if ($c->{Type} eq 'tmhmm') {
	 foreach my $file (@files) {
			parseTmHmm($file, $aa_sq, $out_fh);
	 }
}
elsif ($c->{Type} eq 'sgp') {
	 foreach my $file (@files) {
			parseSgp($file, $aa_sq, $out_fh);
	 }
}
elsif ($c->{Type} eq 'sgphmm') {
	 foreach my $file (@files) {
			parseSgpHmm($file, $aa_sq, $out_fh);
	 }
}





