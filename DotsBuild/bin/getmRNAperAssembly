#!@perl@ 

## dump a list of mRNA for each DoTS assembly

use strict;
use lib "$ENV{GUS_HOME}/lib/perl";
use Getopt::Long;
use GUS::ObjRelP::DbiDatabase;
use GUS::Common::GusConfig;

my ($verbose,$taxon_id,$gusConfigFile);
&GetOptions("verbose!"=> \$verbose,
            "taxon_id=s" => \$taxon_id,
            "gusConfigFile=s" => \$gusConfigFile);

die "usage: getIdsPerAssembly --taxon_id --verbose --gusConfigFile [\$GUS_CONFIG_FILE]\n" unless $taxon_id;

print STDERR "Establishing dbi login\n" if $verbose;

my $gusconfig = GUS::Common::GusConfig->new($gusConfigFile);

my $db = GUS::ObjRelP::DbiDatabase->new($gusconfig->getDbiDsn(),
					$gusconfig->getReadOnlyDatabaseLogin(),
					$gusconfig->getReadOnlyDatabasePassword(),
					$verbose,0,1,
					$gusconfig->getCoreSchemaName());

my $dbh = $db->getQueryHandle();


my $sql = "select ass.assembly_na_sequence_id,e.source_id from dots.ExternalNASequence e, dots.AssemblySequence ass where e.na_sequence_id = ass.na_sequence_id and ass.assembly_na_sequence_id is not null and e.taxon_id = $taxon_id and e.sequence_type_id in (2,7) order by ass.assembly_na_sequence_id";

print STDERR "Query: $sql\n" if $verbose;

my $stmt = $dbh->prepareAndExecute($sql);

my $prev_DT;
my @ids;
my $ct = 0;
while(my($DT,$mRNA) = $stmt->fetchrow_array()){
  if($DT!= $prev_DT){
    print &generateOutput($prev_DT,@ids) if defined $prev_DT;
    undef @ids;
    $ct++;
    print STDERR "Processed $ct\n" if $verbose && $ct % 1000 == 0;
  }
  push(@ids,$mRNA);
  $prev_DT = $DT;
}
print &generateOutput($prev_DT,@ids); ##do the last one

$db->logout();

sub generateOutput {
  my($DT,@ids) = @_;
  return ">DT.$DT (".scalar(@ids)." mRNA\): \(".join(', ',@ids)."\)\n";
}
