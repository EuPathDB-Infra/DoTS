#!@perl@
use strict;

use lib "$ENV{GUS_HOME}/lib/perl";
use GUS::Pipeline::Manager;
use GUS::Pipeline::MakeTaskDirs;
use CBIL::Util::PropertySet;
use CBIL::Util::GenomeDir;
use File::Basename;
use DoTS::DotsBuild::Steps;

$| = 1;
umask 002;


my $propertiesFile = $ARGV[0];

&usage unless -e $propertiesFile;

# [name, default (or null if reqd), comment]
my @properties = 
(
 # properties required by Pipeline API
 ["liniacServer",         "",  "full name of liniac server"],
 ["stopBefore",   "none",  "the step to stop before.  uses the signal name"],

 # properties used by dotsbuild
 ["alignedCluster.cliqueSzArray",   "",  ""],
 ["alignedCluster.consistentEnds",         "",  ""],
 ["alignedCluster.length",          "",  "length cutoff"],
 ["alignedCluster.logbase",         "",  ""],
 ["alignedCluster.logbaseArray",    "",  ""],
 ["alignedCluster.percent",         "",  "percent ident cutoff"],
 ["allgenesLogin", "","login for allgenes schema, for creation and filling of table ProteinAssembly"],
 ["allgenesPassword", "","password for allgenes schema, for creation and filling of table ProteinAssembly"],
 ["allgenesSchema", "","login used for allgenes tables schema"],
 ["allgenesVersion", "", "version number for allgenes, e.g. 5.0"],
 ["assignDescriptionRestart" , "","list of algorithm_invocation_id for restart of AssignSequenceDescription"],
 ["blastmatrix.taskSize", "",  "number of seqs to process per blastmatrix subtask"],
 ["blastsimilarity.Bparam", "", "paramter B for blastsimilarity"], 
 ["blastsimilarity.Eparam", "", "paramter E for blastsimilarity"],
 ["blastsimilarity.taskSize", "",  "number of seqs to process per blastsimilarity subtask"],
 ["blastsimilarity.Vparam", "", "paramter V for blastsimilarity"],
 ["buildDate" ,   "", "approximate start date of build"],
 ["cap4Dir", "","directory containing executable cap4"],
 ["cd_db_rls_id", "","a new id, CD of CDD, for the external_database_release table"],
 ["cddDate", "","approx date for cdd download"],
 ["cddFileDates", "","approx date for cdd files"],
 ["cog_db_rls_id", "","a new id,COG of CDD,for the external_database_release table"],
 ["completedSpeciesNickName", "",  "nick name of the other species (eg mus if this is a hum build) if that one completed first. use 'notdone' if it isn't done."],
 ["copyCDD", "", "yes or no"],
 ["copyGenomeToLiniac",   "",  "yes or no"],
 ["copyNRDBToLiniac", "", "yes or no"],
 ["copyProdomToLiniac", "", "yes or no"],
 ["dbestDate", "","approx date for dbEST files"],
 ["dbESTRestart", "","number (dbest_id_est from dots.est) to restart parsedbEST plugin on, get from log"],
 ["dbi_str", "", "string used to identify server and login for LoadNRDB temp table"],
 ["dianaDir" ,  "","directory in which to find the diana program"],
 ["dotsBuildDir",         "",  "local dots update dir"],
 ["dotsRelease",          "",  "eg 5 or 6"],
 ["downloadCDD",   "",  "yes or no"],
 ["downloadGenbank",   "",  "yes or no"],
 ["downloadGenome",   "",  "yes or no"],
 ["downloadHinvitational", "", "yes or no"],
 ["downloadLocusLink", "","download the loc2acc file for LocusLink, yes or no"],
 ["downloadNRDB",   "",  "yes or no"],
 ["downloadProdom",   "",  "yes or no"],
 ["downloadTaxon",   "",  "yes or no"],
 ["epconDB_anatomy_ids", "","anatomyids used in query to create EPConDB input seqs file"],
 ["epconDB_array", "","array id used in query to create EPConDB input seqs for array file"],
 ["epconDB_chip", "","chip name used in query to create EPConDB input seqs for array file"],
 ["epconDB_makefile", "","make file of input seqs for EPConDB array, yes or no"],
 ["ePCRinPath",   "", "where to find e-PCR, eg /usr/local/src/bio/e-PCR/src"],
 ["externalDbDir", "", "directory for downloading data from external databases"],
 ["fantom_db_rel_id", "","external_database_release_id for Fantom"],
 ["fantom_db_id", "","external_database_id for Fantom"],
 ["loadFantom", "","yes or no"],
 ["fileOfRepeats", "","subdirectory and library(file) of repeats, e.g. unknown_release/vector_humMitoRibo.lib"],
 ["frameFinderDir" ,  "","directory in which to find the framefinder program"],
 ["frameFinderRestart" ,  "","list of algorithm_invocation_id for restart of FrameFinder plugin, eg '1,2,3'"],
 ["gb_db_rel_id", "", "external_database_release_id for GenBank"],
 ["gbAcceptFiles", "","files to accept on Genbank download"],
 ["gbFiles", "", "list of comma delinieated genbank files to be parsed into GUS"],
 ["gbRejectFiles", "","files to reject on Genbank download"],
 ["gea_db_id", "","gea external_database_id"],
 ["gea_db_rls_id", "","comma delimited list of gea external_database_release_ids"],
 ["geaFiles", "","comma delimited list of input files with <gea><LocusLink><accession>:external_database_release_id"],
 ["genbankRel", "", "GenBank release number found in the README file"],
 ["genecards_db_rls_id",   "",  "database release id for genecards"],
 ["geneCluster.cliqueSzArray",  "",  ""],
 ["geneCluster.consistentEnds",         "",  ""],
 ["geneCluster.length",         "",  "length cutoff"],
 ["geneCluster.logbase",        "",  ""],
 ["geneCluster.logbaseArray",   "",  ""],
 ["geneCluster.percent",        "",  "percent ident cutoff"],
 ["geneTrapDbRls", "", "name:external_database_release_id abbreviation pairs for gene trap sequences e.g. stl:3692,ggtc:5393"],
 ["genome_db_rls_id", "","the external_database_release_id for the human genome for this species"],
 ["genomeGapLogin", "","login for table space for genome gap tables"],
 ["genome.options",   "",  "options to genome-align executable"],
 ["genome.path",      "",  "path on node of genome-align executable"],
 ["genome.taskSize",  "",  "number of seqs to process per genome-align subtask"],
 ["genomeVersion",      "",  "Golden Path genome assembly version, eg hg16, mm4"],
 ["ggtc_db_rls_id", "","the external_database_release_id for the GGTC"],
 ["GOrootId",   "",  "only until GUS 3.0, eg, 59235"],
 ["GOversion",   "",  "version of GO, eg, 2.155"],
 ["gusConfigFile",           "",  ""],
 ["h-inv_db_id", "","external_database_id for H-invitational"],
 ["h-inv_db_rls_id", "","external_database_release_id for H-invitational"],
 ["imclone_db_rls_id" , "","the external_database_release_id for imclone"],
 ["includeSubspecies", "","yes or no"],
 ["indexNRDBWordsRestart", "","yes or no"],
 ["indexSimilarityWordsRestart", "","yes or no"],
 ["initialCluster.cliqueSzArray",   "",  ""],
 ["initialCluster.consistentEnds",         "",  ""],
 ["initialCluster.length",          "",  "length cutoff"],
 ["initialCluster.logbase",         "",  ""],
 ["initialCluster.logbaseArray",    "",  ""],
 ["initialCluster.percent",         "",  "percent ident cutoff"],
 ["insertGenbank", "","yes or no"],
 ["insertProdom", "","yes or no"],
 ["insertTaxonRestart" , "","last ncbi_tax_id in the log for restarting LoadTaxon.pm"],
 ["intermedCluster.cliqueSzArray",  "",  ""],
 ["intermedCluster.consistentEnds",         "",  ""],
 ["intermedCluster.length",         "",  "length cutoff"],
 ["intermedCluster.logbase",        "",  ""],
 ["intermedCluster.logbaseArray",   "",  ""],
 ["intermedCluster.percent",        "",  "percent ident cutoff"],
 ["iPSRestart_finalDots-cdd" , "","list of algorithm_invocation_id for restart of insertProteinSimilaritiesPK for cdd, see ffRestart"],
 ["iPSRestart_finalDots-nrdb" , "","list of algorithm_invocation_id for restart of insertProteinSimilaritiesPK for nrdb, see ffRestart"],
 ["iPSRestart_finalDots-prodom" , "","list of algorithm_invocation_id for restart of insertProteinSimilaritiesPK for prodom, see ffRestart"],
 ["kog_db_rls_id", "","a new id,KOG of CDD,for the external_database_release table"],
 ["liniacUser", "","user for copyToLiniac sub in Manager.pm"],
 ["ll_db_id", "","LocusLink external_database_id"],
 ["llDeleteDbRef", "","option to delete dbref entries, used in InsertDbRefAndDbRefNASequence, yes or no"],
 ["loadDbEst", "", "yes or no"],
 ["load_db_rls_id",   "",  "a new id for the external_database_release table"],
 ["loadGEA" ,  "",  "yes or no"],
 ["loadGeneCards",   "",  "yes or no"],
 ["loadGeneTrapAssembly", "", "yes or no"],
 ["loadLocusLink", "", "yes or no"],
 ["loadMGI" ,  "",  "yes or no"],
 ["locuslink_db_rls_id" , "","the external_database_release_id for LL"],
 ["makeAllgenesTable", "","make table ProteinAssembl, yes or no"],
 ["makeNewGORules",   "",  "yes or no. Regenerate the GO rules from scratch"],
 ["mgc_db_id", "","database id for mgc"],
 ["mgc_db_rel_id", "", "database release id for mgc"],
 ["mgi_db_rls_id",   "",  "database release id for mgi"],
 ["mgiFiles","","mgi mapping files, a comma delimited list"],
 ["ncbiBlastBinPathLiniac",         "",  "path of ncbi blast bin dir on Liniac"],
 ["ncbiTaxId", "","ncbi tax_id corresponding to the taxon_id"],
 ["NewGeneTags", "", "yes or no"],
 ["nodePath",             "",  "full path of scratch dir on liniac node"],
 ["nrdbDate", "","approx date of NRDB file"],
 ["nrdb_db_rls_id" , "","the external_database_release_id for nrdb"],
 ["nrdb_delete", "","use --delete option for LoadNrdb plugin, yes or no"],
 ["nrdb_maketemp", "","use --maketemp option for LoadNrdb plugin, yes or no"],
 ["nrdb_plugin", "","use --plugin option for LoadNrdb plugin, yes or no"],
 ["nrdbRestart" , "","last set number in log for restarting LoadNrdb.pm"],
 ["otherSpeciesRelease", "","most recent, completed, release number of other the species, hum or mus"],
 ["pfam_db_rls_id",   "",  "a new id for the external_database_release table"],
 ["phrapDir", "","phrap directory"],
 ["prodom_db_rls_id",   "",  "a new id for the external_database_release table"],
 ["prodomRelease",   "",  "eg 2001.3"],
 ["prodomVersion", "","prodom version used for build"],
 ["proteinRelease", "", "release number for protein link on liniac"],
 ["project_id", "","project_id from projectinfo table, used in projectLink table,get from first species run"],["makeStatPage", "","make Statistics page, yes or no"],
 ["projectLinkRestart", "", "yes or no"],
 ["proteinDir", "","directory containing protein sequence files"],
 ["qualityStartDate", "","date when the last SetAssSeqQualStartStop.pm was run for this taxon"],
 ["reassemble",           "",  "yes or no"],
 ["refseqFile", "","RefSeq file. e.g. mouse.gbff.gz"],
 ["refseq_rel_id", "","external_database_release_id for the RefSeq release"],
 ["refseqRel", "","RefSeq release, e.g 2001-01-08"],
 ["repeatmask.dangleMax", "","option for trimDangling in repeatMasker"],
 ["repeatmask.options",   "",  "number of seqs to process per blastmatrix subtask"],
 ["repeatmask.path",      "",  "path on node of repeatmask executable"],
 ["repeatmask.taskSize",  "",  "number of seqs to process per repeatmask subtask"],
 ["runQualityStart", "","yes or no"],
 ["serverExternalDbDir", "", "directory for external databases on compute cluster server"],
 ["serverPath",           "",  "full path of dots update dir on liniac server"],
 ["smart_db_rls_id",   "",  "a new id for the external_database_release table"],
 ["sourceDB", "", "pair list of ExternalDatabase.name:ncbi abreviations for nrdb, e.g. GENBANK (NRDB):gb,EMBL DATA LIBRARY (NRDB):emb"],
 ["speciesFullname",              "",  "eg Home sapiens"],
 ["speciesNickname",              "",  "eg mus, hum"],
 ["swissprot_rel_id", "","swissprot external_database_release_id"],
 ["taxonId",              "",  "eg 14 for mus"],
 ["tempLogin" , "","login for temp table space, e.g. pinney\@gusdev"],
 ["tempPassword" , "","password for temp table space"],
 ["userId" ,  "","database user_id from UserInfo table in GUS"],
 ["wordfile" ,   "", "file of word probabilities for framefinder"],
 ["wuBlastBinPathLiniac",         "",  "path of wu blast bin dir on Liniac"],
 ["wuBlastBinPath",         "",  "path of wu blast bin dir (local)"]
 ); 

my $propertySet  = CBIL::Util::PropertySet->new($propertiesFile, \@properties);

my $dotsBuildDir = $propertySet->getProp('dotsBuildDir');
my $buildName = &makeBuildName($propertySet->getProp('speciesNickname'),$propertySet->getProp('dotsRelease'));
my $pipelineDir = "$dotsBuildDir/$buildName";

###################  The Pipeline  ##########################

my $mgr = GUS::Pipeline::Manager->new($pipelineDir, $propertySet, $propertiesFile);
$mgr->{dotsBuildDir} = $dotsBuildDir;##in property set, this is redundant
$mgr->{buildName} = $buildName;
$mgr->{pipelineDir} = $pipelineDir;
$mgr->{propertiesFile} = $propertiesFile;
$mgr->{propertySet} = $propertySet;

&createDotsPipelineDir($mgr);

&createGenomeDir($mgr); 

&downloadGenbank($mgr);

&downloadRefSeq($mgr);

&downloadTaxon($mgr);

&downloadNRDB($mgr);

&downloadGenome($mgr);

&insertTaxon($mgr);

&parseGenbank($mgr);

&parseRefSeq($mgr);

&parsedbEST($mgr);

&extractDots("prev", "'DT.'||",$mgr);

&makeAssemSeqs($mgr);

&extractAssemSeqs($mgr);

&copyPipelineDirToLiniac($mgr);

&copyGenomeToLiniac($mgr);

&startGenomicAlignmentOnLiniac($mgr);

   &qualityStart($mgr);
 
   &downloadCDD($mgr);

   &downloadProdom($mgr);

   &unpackCDD($mgr);

   &insertCDD($mgr);

   &insertProdom($mgr);

   &extractProdom($mgr);

   &insertNRDB($mgr);

   &extractNRDB($mgr);

   &copyProteinDBsToLiniac($mgr);

   &insertGenome($mgr);

$mgr->waitForLiniac("genomic alignments of assemSeqs", "waitGenomeAlignAss");

&copyGenomeAssemSeqsFromLiniac($mgr);

&loadGenomeAlignments($mgr, "assemSeqs", "genome");

&clusterByGenome($mgr, "initial");

&splitCluster("initial", $mgr);

&assemble("", $propertySet->getProp('reassemble'), "initial", $mgr);

&reassemble("initial", $mgr);

&deleteAssembliesWithNoAssemblySequences($mgr, "initial");

&extractDots("aligned", "'DT.'||", $mgr);

&extractUnalignedAssemSeqs($mgr);

&copySeqFileToLiniac("unalignedAssemSeqs", $mgr);

&matrix("aligned", $mgr);

&cluster($mgr, "aligned", "alignedDots-alignedDots", "alignedDots-unalignedAssemSeqs", "unalignedAssemSeqs-unalignedAssemSeqs");

&splitCluster("aligned", $mgr);

&assemble("--assemble_old", "no", "aligned", $mgr);

&reassemble("aligned", $mgr);

&deleteAssembliesWithNoAssemblySequences($mgr, "aligned");

&extractDots("final", "", $mgr);

&matrix("final", $mgr);

&markBadSeqs($mgr);  

&getIdsPerAssembly($mgr); 

&startSimilaritiesOnLiniac($mgr);

   &cluster($mgr, "gene", "finalDots-finalDots");

   &sortClusters($mgr);

   &loadRNAClusters($mgr);

   #&deleteGenesWithNoRNA($mgr);

   &makeFrameFinder($mgr);

   &extractMarkers($mgr);

   &deleteEPCR($mgr);

   &runEPCR($mgr);  

   &insertEPCR($mgr);

   &deleteAnatomyPercent($mgr);

   &insertAnatomyPercent($mgr);

   &deleteIndexWords($mgr);

   #&deleteNRDBIndexWords($mgr);

   #&deleteMotifIndexWords($mgr)

   &makeNRDBIndexWordLink($mgr);

   &makeMotifIndexWordLink($mgr);

   &deleteOldSimilarities($mgr);

   &assemblyProteinIntegration($mgr);

   &RNAProteinIntegration($mgr);

   &setPreferredProtein($mgr);

   &makeGeneForRNA($mgr);

   &getAssembliesPerGene($mgr);

   &makeEpconFastaFiles($mgr);

   &prepareEPConBlastSiteFiles($mgr);

   &formatFinalDots($mgr);

   &versionGeneTrapAssembly($mgr);

   &deleteGeneTrapAssembly($mgr);

   &extractGeneTrapTags($mgr);

   &blastGeneTrapTags($mgr);

   &loadGeneTrapAssembly($mgr);

$mgr->waitForLiniac("protein similarities", "waitProteinSims");

&copySimilaritiesFromLiniac($mgr);

&insertProteinSimilarities("finalDots-nrdb", "DoTS::ExternalAASequence", $mgr);

&insertProteinSimilarities("finalDots-prodom", "DoTS::MotifAASequence", $mgr);

&substituteCDDPKs($mgr);

&insertProteinSimilarities("finalDots-cdd", "DoTS::MotifAASequence", $mgr);

&assignSequenceDescription($mgr);

&makeIndexWords($mgr);

&indexSimilarityWords($mgr);

&indexNRDBWords($mgr);

&getmRNAPerAssembly($mgr);

&makePredictedProteinFile($mgr);

&makeProteinChunks($mgr);

&predictTmAndSignalP($mgr);

&parseTMFile($mgr);

&parseSGPSignalP($mgr);

&parseSGPHMMSignalP($mgr);

&deletePredictedAAFeatures("PredictedAAFeature",$mgr);

&loadTMHMM($mgr);

&deletePredictedAAFeatures("SignalPeptideFeature",$mgr);

&loadSGPSignalP($mgr);

&loadSGPHMMSignalP($mgr);

&prepareDownloadSiteFiles($mgr);

&prepareBlastSiteFiles($mgr);

&downloadLocusLink($mgr);

&deleteLocusLink($mgr);

&parseLocusLink($mgr);

&loadLocusLinkToDoTS($mgr);

&loadLocusLinkInfo($mgr);

&downloadHInvitationalFile($mgr);

&parseHinvitationalFile($mgr);

&deleteHinvitational2NaSeqId($mgr);

&loadHinvitational2NaSeqId($mgr);

&downloadMGIInfo($mgr);

&deleteMGIToDots($mgr);

&loadMGIToDoTS($mgr);

&loadMGIInfo($mgr);

&deleteGeneCardsToDots($mgr);

&parseGeneCardsToDoTS($mgr);

&loadGeneCardsToDoTS($mgr);

&deleteMGC($mgr);

&parseMGC($mgr);

&loadMGCToNaSeq($mgr);

&loadMGCInfo($mgr);

&deleteFantom($mgr);

&parseFantom($mgr);

&loadFantomToNaSeq($mgr);

&deleteGEAToDoTS($mgr);

&parseGEA($mgr);

&loadGEA($mgr);

&makeProjectLink($mgr);

&updateProteinAssemblyTable($mgr);

&updateCentralDogmaTable($mgr);

&updateDTOrfPValueTable($mgr);

&updateAssemblySignalPSummaryTable($mgr);

&updateAssemblyTMDomainSummaryTable($mgr);

&updatePromoterRegionTable($mgr);

&updatePancreasAssembliesTable($mgr);

&createPredTranslDetailsFile($mgr);

&createManuallyReviewedDoTSFile($mgr);

&makeStatisticsPage($mgr);

$mgr->goodbye("Pipeline complete!\n");
