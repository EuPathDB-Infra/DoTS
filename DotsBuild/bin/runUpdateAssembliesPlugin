#!@perlLocation@

## monitors assembly and restarts it if detects error...only sybase for now

## method:  do a ps to determine if still running.  
##   if not, restart.  If restart 3x and  log not longer then write the cluster thatt
##   failed to log so will skip and move on to the next one.
##NOTE that the cluster file  must be unique!!



use strict;
use Getopt::Long;

my ($debug,$pluginCmd,$cap4_machine,$taxon_id,$reassemble,$clusterFile);
&GetOptions("clusterFile=s" => \$clusterFile,
	    "taxon_id=i" => \$taxon_id,
	    'reassembly1' => \$reassemble,
            "debug!" => \$debug,
	    "pluginCmd=s" => \$pluginCmd,
	    'cap4_machine=s' => \$cap4_machine);

die "usage: runUpdateAssembliesPlugin.pl --debug --pluginCmd [entire command  for running plugin] --clusterFile\n" unless (-e $clusterFile && $pluginCmd);

##should add some code too exit if already runing on this cluster file
my @checkDups = `ps -auxww | grep $clusterFile | grep -v grep`;
die "Already have a process running for $clusterFile\n" if (@checkDups) > 1;

if($pluginCmd !~ /WithCap4\s*$/){
  die "--pluginCmd must end with UpdateDotsAssembliesWithCap4\n";
}

my $command = $pluginCmd . " > assemble.err 2>&1";
print STDERR "PluginCmd = $command\n";
my $log = 'updateDOTSAssemblies.log';
my $failedCluster;
my $err;

print STDERR "running runUpdateAssembliesPlugin.pl\n" if $debug;

my $prevCluster = "";
my $restart = 0;
my $failedRestart = 0;
while (1) {


  if($debug){
    print STDERR "Running: $command\n";
    sleep 5;
  }else{
    system($command);
  }

  $failedCluster = 0;
  $err = "";

  ##now check length of updateDOTSAssemblies.log...if  same length as previous check then
  ## write problem cluste to log so will skip..
#  my $line = `tail -1 $log`;
  open(L, "$log");
  my @log = (<L>);
  close L;
  if(scalar(@log)== 0){
      ##failing on the first cluster....
      my $tmp = `head -1 $clusterFile`;
      open(T, "$clusterFile");
      my $lastCluster;
      while(<T>){
	  if(/^(Cluster_\S+)/) {
	      $lastCluster = $1;
	      if($lastCluster eq $prevCluster){
		  open(L,">>$log");
		  print L "$lastCluster ERROR: sql failure\n";
		  close L;
		  $err .= "$lastCluster ERROR: sql failure for $clusterFile\n";
	      }
	      close T;
	      last;
	  }
      } 
      $prevCluster = $lastCluster;
      system("cat assemble.err >> assemble.errLog");
      next;
  }
  foreach my $line (reverse(@log)){
#    print STDERR $line;
    if($line =~ /^Processed/){  #finished
      die "UpdateAssemblies complete..exiting\n";
    }elsif ($line =~ /^\#?(Cluster_\S+)/) {
      $restart = 0;
      my $lastCluster = $1;
      print STDERR "Last Cluster = $lastCluster\n" if $debug;
      if($lastCluster eq $prevCluster){
        ##cluster can't be assembled....
        print STDERR "previous cluster '$prevCluster' = last cluster '$lastCluster'\n" if $debug;
        open(H,"$clusterFile") || die "file $clusterFile not found\n";
        #				my @tmp = <H>;
        while (<H>) {
          if (/^(Cluster_\S+)/) {
            #						print STDERR "Processing $1\n" if $debug;
            if ($1 eq $lastCluster) {
              my $line = <H>;
              print $line if $debug;
              if ($line =~ /^(Cluster_\S+)/) {
                $failedCluster = $1;
                print STDERR "failed cluster = $failedCluster\n" if $debug;
                last;
              }
            }
          }
        }	
        close H;
        if ($failedCluster) {
          
          open(L,">>$log");
          print L "$failedCluster ERROR: sql failure\n";
          close L;
          $err .= "$failedCluster ERROR: sql failure for $clusterFile\n";
          system("cat assemble.err >> assemble.errLog");
          $failedRestart = 0;
#          system("$restartCmd") unless $debug;
        } else {
          $err .= "ERROR: unable to determine failed cluster for $clusterFile...restarting $failedRestart times\n";
          die "  Exiting after restarting $restart times\n" if ($failedRestart > 2);
          system("cat assemble.err >> assemble.errLog");
          $failedRestart++;
#          system("$restartCmd") unless $debug;
        }
      }else{
        ##restart here
        print STDERR "last  cluster OK...restarting\n" if $debug;
        system("cat assemble.err >> assemble.errLog");
#        system("$restartCmd") unless $debug;
      }
      $prevCluster = $lastCluster;
      last;  ##break out of loop as have last line...
    }else{
      print STDERR "Can't determine last cluster assembled\n";
#      die "  Exiting after restarting $restart times\n" if $restart > 2;
      system("cat assemble.err >> assemble.errLog");
      $restart++;
#      system("$restartCmd") unless $debug;
    }
  } 
  
  die "Unable to determine last cluster....exiting\n" if $restart;
  if ($err) {
    print STDERR "$err" if $debug;
    open(L,">>restart.log");
    print L "$err\t".`date`;
    close L;
  }
  
}
