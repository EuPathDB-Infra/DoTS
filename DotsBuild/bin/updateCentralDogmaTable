#!@perl@
use strict;
use lib "$ENV{GUS_HOME}/lib/perl";
use Getopt::Long;
use GUS::ObjRelP::DbiDatabase;
use GUS::Common::GusConfig;

my ($verbose,$taxonId,$gusConfigFile,$allgenesSchema);
&GetOptions("verbose!"=> \$verbose,
	    "taxonId=i" => \$taxonId,
	    "allgenesSchema=s"=> \$allgenesSchema,
            "gusConfigFile=s" => \$gusConfigFile);


die "usage: updateCentralDogmaTable --taxonId --allgenesSchema --verbose --gusConfigFile [\$GUS_CONFIG_FILE]\n" 
unless ($allgenesSchema && $taxonId);

print STDERR "Establishing dbi login\n" if $verbose;

my $gusconfig = GUS::Common::GusConfig->new($gusConfigFile);

my $db = GUS::ObjRelP::DbiDatabase->new($gusconfig->getDbiDsn(),
					$gusconfig->getDatabaseLogin(),
					$gusconfig->getDatabasePassword(),
					$verbose,0,1,
					$gusconfig->getCoreSchemaName());

my $dbh = $db->getQueryHandle();

my $tableName = "${allgenesSchema}.CentralDogma";


############# delete old rows #######################
 my $deleteSql =
"delete from $tableName where taxon_id = $taxonId";
print STDERR "Deleting \n";
print STDERR "deleteSql: $deleteSql\n" if $verbose;

$dbh->do($deleteSql) || die "Delete failed.\nSQL: $deleteSql";

print STDERR "Committing delete\n";
$dbh->commit(); 


############# insert info from Assembly and Taxon tables #######################
my $insertSql = 
"insert into $tableName
    select /*+ rule */ null, null, null, null, a.na_sequence_id, a.taxon_id,
      tn.name, null, null, a.length, a.description, 
      a.number_of_contained_sequences, a.contains_mrna
    from dots.assembly a, sres.taxonName tn
    where a.taxon_id = $taxonId
    and tn.taxon_id = $taxonId";

print STDERR "Inserting na_sequence_id, taxon_id\n";
print STDERR "insertSql: $insertSql\n" if $verbose;

$dbh->do($insertSql) || die "Insert failed.\nSQL: $insertSql";

print STDERR "Committing insert\n";
$dbh->commit();


############# update info from rnaFeature table #######################
my $updateSql =
"update $tableName cd 
     set cd.na_feature_id = (select rf.na_feature_id from dots.rnafeature rf where rf.na_sequence_id = cd.na_sequence_id)";

print STDERR "Updating na_feature_id\n";
print STDERR "updateSql: $updateSql\n" if $verbose;

$dbh->do($updateSql) || die "Update failed.\nSQL: $updateSql";

print STDERR "Committing update\n";
$dbh->commit();


############# update info from rnaInstance table #######################
my $updateSql =
"update $tableName cd 
     set cd.rna_id = (select rs.rna_id from dots.rnainstance rs where rs.na_feature_id = cd.na_feature_id)";

print STDERR "Updating rna_id\n";
print STDERR "updateSql: $updateSql\n" if $verbose;

$dbh->do($updateSql) || die "Update failed.\nSQL: $updateSql";

print STDERR "Committing update\n";
$dbh->commit();


############# update info from Protein table #######################
my $updateSql =
"update $tableName cd 
     set cd.protein_id = (select p.protein_id from dots.protein p where  p.rna_id = cd.rna_id)";

print STDERR "Updating protein_id\n";
print STDERR "updateSql: $updateSql\n" if $verbose;

$dbh->do($updateSql) || die "Update failed.\nSQL: $updateSql";

print STDERR "Committing update\n";
$dbh->commit();


############# update info from Gene table #######################
my $updateSql =
"update $tableName cd 
     set (cd.gene_description, cd.gene_symbol) = (select g.description, g.symbol from dots.gene g where g.gene_id = cd.gene_id)";

print STDERR "Updating gene_description, gene_symbol\n";
print STDERR "updateSql: $updateSql\n" if $verbose;

$dbh->do($updateSql) || die "Update failed.\nSQL: $updateSql";

print STDERR "Committing update\n";
$dbh->commit();





