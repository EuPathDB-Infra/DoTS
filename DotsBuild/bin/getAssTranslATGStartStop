#!@perl@ 

## creates report of assembly translations per taxon_id
## DT.xxx,FF/TT,yes/no,translation_start,translation_stop,reversed
## FF=FrameFinder,TT=trivial translation,yes/no=Diana_atg

use strict;
use lib "$ENV{GUS_HOME}/lib/perl";
use Getopt::Long;
use GUS::ObjRelP::DbiDatabase;
use GUS::Common::GusConfig;

my ($verbose,$taxon_id,$gusConfigFile);
&GetOptions("verbose!"=> \$verbose,
            "taxon_id=s" => \$taxon_id,
            "gusConfigFile=s" => \$gusConfigFile);

die "usage: getIdsPerAssembly --taxon_id --verbose --gusConfigFile [\$GUS_CONFIG_FILE]\n" unless $taxon_id;

print STDERR "Establishing dbi login\n" if $verbose;

my $gusconfig = GUS::Common::GusConfig->new($gusConfigFile);

my $db = GUS::ObjRelP::DbiDatabase->new($gusconfig->getDbiDsn(),
					$gusconfig->getReadOnlyDatabaseLogin(),
					$gusconfig->getReadOnlyDatabasePassword(),
					$verbose,0,1,
					$gusconfig->getCoreSchemaName());

my $dbh = $db->getQueryHandle();

my $sql = "select /*+ RULE */ a.na_sequence_id,f.prediction_algorithm_id,f.translation_start,f.translation_stop,f.diana_atg_position,f.is_reversed,f.p_value from dots.assembly a, dots.translatedaafeature f, dots.rnafeature r, dots.proteininstance p where a.taxon_id = $taxon_id and a.na_sequence_id = r.na_sequence_id and r.na_feature_id = f.na_feature_id and f.aa_feature_id = p.aa_feature_id and p.is_reference = 1";


print STDERR "Query: $sql\n" if $verbose;
print STDOUT "DT.XXXXXX\tFF/TT\tDIANA_ATG(yes/no)\tTranslStart\tTranslStop\treversed\tp_value\n\n";
my $stmt = $dbh->prepareAndExecute($sql);

my $ct = 0;
while(my($id,$alg,$start,$stop,$atg,$reversed,$p_value) = $stmt->fetchrow_array()){
  $id = "DT.".$id;
  if ($alg == 64){
    $alg = 'FF';
  }
  elsif ($alg == 3289) {
    $alg = 'TT';
  }
  else {
    next;
  }
  if ($atg == 0 || !$atg) {
    $atg = 'no';
  }
  else {
    $atg = 'yes';
  }
  if ($reversed == 1) {
    $reversed = 'reverse';
  }
  else {
    $reversed = 'forward';
  }
  
  $ct++;
  print STDOUT "$id\t$alg\t$atg\t$start\t$stop\t$reversed\t$p_value\n";

  my $date = `date`;

  chomp ($date); 
  print STDERR "$date : $ct\n" if ($ct % 10000 ==0);
}
